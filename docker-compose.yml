services:
  db:
    build:
      context: ./db
      dockerfile: Dockerfile
    container_name: db
    restart: always
    volumes:
      - ./db/init_db.sh:/docker-entrypoint-initdb.d/init_db.sh
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - ./backend/.env
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      retries: 5
      start_period: 30s

  # Django service
  django:
    build: 
      context: ./backend  # Path to the backend Django Dockerfile
      dockerfile: Dockerfile.django # Name of the Django-specific Dockerfile
    container_name: django
    depends_on:
      db:
        condition: service_healthy
    restart: always
    env_file:
      - ./backend/.env
    volumes:
      - ./backend:/app
      - ./backend/src:/app/src
    ports:
      - "8000:8000"
    command: >
      sh -c "/app/wait-for-it.sh db:5432 --timeout=60 -- 
            python /app/src/manage.py makemigrations &&
            python /app/src/manage.py migrate &&
            python /app/src/manage.py runserver 0.0.0.0:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # FastAPI service
  fastapi:
    build: 
      context: ./backend  # Path to the FastAPI Dockerfile
      dockerfile: Dockerfile.fastapi  # Name of the FastAPI-specific Dockerfile
    container_name: fastapi
    depends_on:
      django:
        condition: service_healthy 
      db:
        condition: service_healthy
    restart: always
    env_file:
      - ./backend/.env
    volumes:
      - ./backend:/app
    ports:
      - "8001:8000"  # Exposing FastAPI on a different port (8001)
    command: >
      sh -c "/app/wait-for-it.sh django:8000 --timeout=60 -- 
            python -m src.main"

  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile  # This builds the React app and serves it with Nginx
    container_name: frontend
    restart: always
    ports:
      - "80:80"  # Serve the static files via Nginx
    depends_on:
      - django

volumes:
  postgres_data:
